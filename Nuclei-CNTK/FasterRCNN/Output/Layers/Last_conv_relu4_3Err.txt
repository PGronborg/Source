Selected GPU[0] GeForce GTX TITAN X as the process wide default device.
-------------------------------------------------------------------
Build info: 

		Built time: Jan 31 2018 15:03:41
		Last modified date: Tue Jan 30 03:26:13 2018
		Build type: release
		Build target: GPU
		With 1bit-SGD: no
		With ASGD: yes
		Math lib: mkl
		CUDA version: 9.0.0
		CUDNN version: 7.0.3
		Build Branch: HEAD
		Build SHA1: a70455c7abe76596853f8e6a77a4d6de1e3ba76e
		MPI distribution: Open MPI
		MPI version: 1.10.7
-------------------------------------------------------------------
cuDNN failure 3: CUDNN_STATUS_BAD_PARAM ; GPU=0 ; hostname=cronus ; expr=cudnnSetConvolutionNdDescriptor(m_conv, (int)dim_size, pad.data(), stride.data(), dilation.data(), CUDNN_CROSS_CORRELATION, dataType == CUDNN_DATA_HALF ? CUDNN_DATA_FLOAT : dataType)
Traceback (most recent call last):
  File "run_faster_rcnn_VGG16.py", line 47, in <module>
    trained_model = train_faster_rcnn(cfg)
  File "/home/s124262/Source/Nuclei-CNTK/FasterRCNN/FasterRCNN_train.py", line 297, in train_faster_rcnn
    eval_model = train_faster_rcnn_e2e(cfg)
  File "/home/s124262/Source/Nuclei-CNTK/FasterRCNN/FasterRCNN_train.py", line 335, in train_faster_rcnn_e2e
    e2e_lr_per_sample_scaled, mm_schedule, cfg["CNTK"].L2_REG_WEIGHT, cfg["CNTK"].E2E_MAX_EPOCHS, cfg)
  File "/home/s124262/Source/Nuclei-CNTK/FasterRCNN/FasterRCNN_train.py", line 614, in train_model
    trainer.train_minibatch(data) #check syntax
  File "/home/s124262/.conda/envs/myjob/lib/python3.5/site-packages/cntk/train/trainer.py", line 181, in train_minibatch
    arguments, device)
  File "/home/s124262/.conda/envs/myjob/lib/python3.5/site-packages/cntk/cntk_py.py", line 2975, in train_minibatch_overload_for_minibatchdata
    return _cntk_py.Trainer_train_minibatch_overload_for_minibatchdata(self, *args)
RuntimeError: cuDNN failure 3: CUDNN_STATUS_BAD_PARAM ; GPU=0 ; hostname=cronus ; expr=cudnnSetConvolutionNdDescriptor(m_conv, (int)dim_size, pad.data(), stride.data(), dilation.data(), CUDNN_CROSS_CORRELATION, dataType == CUDNN_DATA_HALF ? CUDNN_DATA_FLOAT : dataType)

[CALL STACK]
[0x7fade51bd139]                                                       + 0x6f0139
[0x7faddc9af7df]                                                       + 0xdac7df
[0x7faddc9b1152]    Microsoft::MSR::CNTK::CuDnnConv::  CuDnnConv  (Microsoft::MSR::CNTK::ConvolveGeometry const&,  cudnnDataType_t) + 0x5d2
[0x7faddc9b7104]    Microsoft::MSR::CNTK::CuDnnConvolutionEngine<float>::  EnsureConvolutionInitialized  () + 0xc4
[0x7faddc90b725]    Microsoft::MSR::CNTK::ConvolutionEngine<float>::  Forward  (Microsoft::MSR::CNTK::Matrix<float> const&,  Microsoft::MSR::CNTK::Matrix<float> const&,  Microsoft::MSR::CNTK::Matrix<float>&,  Microsoft::MSR::CNTK::Matrix<float>&) + 0x35
[0x7fade5476f83]    Microsoft::MSR::CNTK::ConvolutionNode<float>::  ForwardProp  (Microsoft::MSR::CNTK::FrameRange const&) + 0xa3
[0x7fade56803c9]    Microsoft::MSR::CNTK::ComputationNetwork::PARTraversalFlowControlNode::  ForwardProp  (std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase> const&,  Microsoft::MSR::CNTK::FrameRange const&) + 0xe9
[0x7fade53dd4b3]    std::_Function_handler<void (std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase> const&),void Microsoft::MSR::CNTK::ComputationNetwork::ForwardProp<std::vector<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>,std::allocator<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>>>>(std::vector<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>,std::allocator<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>>> const&)::{lambda(std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase> const&)#1}>::  _M_invoke  (std::_Any_data const&,  std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase> const&) + 0x63
[0x7fade542d4d9]    void Microsoft::MSR::CNTK::ComputationNetwork::  TravserseInSortedGlobalEvalOrder  <std::vector<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>,std::allocator<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>>>>(std::vector<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>,std::allocator<std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase>>> const&,  std::function<void (std::shared_ptr<Microsoft::MSR::CNTK::ComputationNodeBase> const&)> const&) + 0x5b9
[0x7fade53ce2b5]    CNTK::CompositeFunction::  Forward  (std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>> const&,  std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>>&,  CNTK::DeviceDescriptor const&,  std::unordered_set<CNTK::Variable,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<CNTK::Variable>> const&,  std::unordered_set<CNTK::Variable,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<CNTK::Variable>> const&) + 0x14e5
[0x7fade53715a3]    CNTK::Function::  Forward  (std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>> const&,  std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>>&,  CNTK::DeviceDescriptor const&,  std::unordered_set<CNTK::Variable,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<CNTK::Variable>> const&,  std::unordered_set<CNTK::Variable,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<CNTK::Variable>> const&) + 0x93
[0x7fade54d5d0b]    CNTK::Trainer::  ExecuteForwardBackward  (std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>> const&,  std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>>&,  CNTK::DeviceDescriptor const&,  std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>>&) + 0x35b
[0x7fade54d6a34]    CNTK::Trainer::  TrainLocalMinibatch  (std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>> const&,  std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>>&,  bool,  CNTK::DeviceDescriptor const&) + 0x94
[0x7fade54d7c58]    CNTK::Trainer::  TrainMinibatch  (std::unordered_map<CNTK::Variable,CNTK::MinibatchData,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,CNTK::MinibatchData>>> const&,  std::unordered_map<CNTK::Variable,std::shared_ptr<CNTK::Value>,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,std::shared_ptr<CNTK::Value>>>>&,  CNTK::DeviceDescriptor const&) + 0x88
[0x7fade54d7dff]    CNTK::Trainer::  TrainMinibatch  (std::unordered_map<CNTK::Variable,CNTK::MinibatchData,std::hash<CNTK::Variable>,std::equal_to<CNTK::Variable>,std::allocator<std::pair<CNTK::Variable const,CNTK::MinibatchData>>> const&,  CNTK::DeviceDescriptor const&) + 0x4f
[0x7fade6118901]                                                       + 0x23a901
[0x55dcfeee4b27]    PyCFunction_Call                                   + 0x47
[0x55dcfef47fc2]    PyEval_EvalFrameEx                                 + 0x7132
[0x55dcfef46120]    PyEval_EvalFrameEx                                 + 0x5290
[0x55dcfef46990]    PyEval_EvalFrameEx                                 + 0x5b00 (x3)
[0x55dcfef41950]    PyEval_EvalFrameEx                                 + 0xac0
[0x55dcfef4bf1d]    PyEval_EvalCodeEx                                  + 0x20d
[0x55dcfef4ce6c]    PyEval_EvalCode                                    + 0x1c
[0x55dcfefa8424]                                                       + 0x20a424
[0x55dcfefa9a91]    PyRun_FileExFlags                                  + 0xa1
[0x55dcfefa9c9e]    PyRun_SimpleFileExFlags                            + 0x1de
[0x55dcfefaa392]    Py_Main                                            + 0x612
[0x55dcfee76061]    main                                               + 0xe1
[0x7fae3af0e830]    __libc_start_main                                  + 0xf0
[0x55dcfef4e818]                                                       + 0x1b0818

